#include "DriverGL11.h"

void (STDCALL* DriverGL11::Accum)(GLenum op, GLfloat value) = NULL;
void (STDCALL* DriverGL11::AlphaFunc)(GLenum op, GLfloat value) = NULL;
GLboolean (STDCALL* DriverGL11::AreTexturesResident)(GLsizei n, const GLuint* textures, GLboolean* residences) = NULL;
void (STDCALL* DriverGL11::ArrayElement)(GLint i) = NULL;
void (STDCALL* DriverGL11::Begin)(GLenum mode) = NULL;
void (STDCALL* DriverGL11::BindTexture)(GLenum target, GLuint texture) = NULL;
void (STDCALL* DriverGL11::Bitmap)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap) = NULL;
void (STDCALL* DriverGL11::BlendFunc)(GLenum sfactor, GLenum dfactor) = NULL;
void (STDCALL* DriverGL11::CallList)(GLuint list) = NULL;
void (STDCALL* DriverGL11::CallLists)(GLsizei n, GLenum type, const GLvoid* lists) = NULL;
void (STDCALL* DriverGL11::Clear)(GLbitfield mask) = NULL;
void (STDCALL* DriverGL11::ClearAccum)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = NULL;
void (STDCALL* DriverGL11::ClearColor)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) = NULL;
void (STDCALL* DriverGL11::ClearDepth)(GLclampd depth) = NULL;
void (STDCALL* DriverGL11::ClearIndex)(GLfloat c) = NULL;
void (STDCALL* DriverGL11::ClearStencil)(GLint s) = NULL;
void (STDCALL* DriverGL11::ClipPlane)(GLenum plane, const GLdouble* equation) = NULL;
void (STDCALL* DriverGL11::Color3b)(GLbyte red, GLbyte green, GLbyte blue) = NULL;
void (STDCALL* DriverGL11::Color3bv)(const GLbyte* v) = NULL;
void (STDCALL* DriverGL11::Color3d)(GLdouble red, GLdouble green, GLdouble blue) = NULL;
void (STDCALL* DriverGL11::Color3dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::Color3f)(GLfloat red, GLfloat green, GLfloat blue) = NULL;
void (STDCALL* DriverGL11::Color3fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::Color3i)(GLint red, GLint green, GLint blue) = NULL;
void (STDCALL* DriverGL11::Color3iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::Color3s)(GLshort red, GLshort green, GLshort blue) = NULL;
void (STDCALL* DriverGL11::Color3sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::Color3ub)(GLubyte red, GLubyte green, GLubyte blue) = NULL;
void (STDCALL* DriverGL11::Color3ubv)(const GLubyte* v) = NULL;
void (STDCALL* DriverGL11::Color3ui)(GLuint red, GLuint green, GLuint blue) = NULL;
void (STDCALL* DriverGL11::Color3uiv)(const GLuint* v) = NULL;
void (STDCALL* DriverGL11::Color3us)(GLushort red, GLushort green, GLushort blue) = NULL;
void (STDCALL* DriverGL11::Color3usv)(const GLushort* v) = NULL;
void (STDCALL* DriverGL11::Color4b)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) = NULL;
void (STDCALL* DriverGL11::Color4bv)(const GLbyte* v) = NULL;
void (STDCALL* DriverGL11::Color4d)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) = NULL;
void (STDCALL* DriverGL11::Color4dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::Color4f)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = NULL;
void (STDCALL* DriverGL11::Color4fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::Color4i)(GLint red, GLint green, GLint blue, GLint alpha) = NULL;
void (STDCALL* DriverGL11::Color4iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::Color4s)(GLshort red, GLshort green, GLshort blue, GLshort alpha) = NULL;
void (STDCALL* DriverGL11::Color4sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::Color4ub)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) = NULL;
void (STDCALL* DriverGL11::Color4ubv)(const GLubyte* v) = NULL;
void (STDCALL* DriverGL11::Color4ui)(GLuint red, GLuint green, GLuint blue, GLuint alpha) = NULL;
void (STDCALL* DriverGL11::Color4uiv)(const GLuint* v) = NULL;
void (STDCALL* DriverGL11::Color4us)(GLushort red, GLushort green, GLushort blue, GLushort alpha) = NULL;
void (STDCALL* DriverGL11::Color4usv)(const GLushort* v) = NULL;
void (STDCALL* DriverGL11::ColorMask)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) = NULL;
void (STDCALL* DriverGL11::ColorMaterial)(GLenum face, GLenum mode) = NULL;
void (STDCALL* DriverGL11::ColorPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer) = NULL;
void (STDCALL* DriverGL11::CopyPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) = NULL;
void (STDCALL* DriverGL11::CopyTexImage1D)(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border) = NULL;
void (STDCALL* DriverGL11::CopyTexImage2D)(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = NULL;
void (STDCALL* DriverGL11::CopyTexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = NULL;
void (STDCALL* DriverGL11::CopyTexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = NULL;
void (STDCALL* DriverGL11::CullFace)(GLenum mode) = NULL;
void (STDCALL* DriverGL11::DeleteLists)(GLuint list, GLsizei range) = NULL;
void (STDCALL* DriverGL11::DeleteTextures)(GLsizei n, const GLuint* textures) = NULL;
void (STDCALL* DriverGL11::DepthFunc)(GLenum func) = NULL;
void (STDCALL* DriverGL11::DepthMask)(GLboolean flag) = NULL;
void (STDCALL* DriverGL11::DepthRange)(GLclampd zNear, GLclampd zFar) = NULL;
void (STDCALL* DriverGL11::Disable)(GLenum cap) = NULL;
void (STDCALL* DriverGL11::DisableClientState)(GLenum array) = NULL;
void (STDCALL* DriverGL11::DrawArrays)(GLenum mode, GLint first, GLsizei count) = NULL;
void (STDCALL* DriverGL11::DrawBuffer)(GLenum mode) = NULL;
void (STDCALL* DriverGL11::DrawElements)(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices) = NULL;
void (STDCALL* DriverGL11::DrawPixels)(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels) = NULL;
void (STDCALL* DriverGL11::EdgeFlag)(GLboolean flag) = NULL;
void (STDCALL* DriverGL11::EdgeFlagPointer)(GLsizei stride, const GLvoid* pointer) = NULL;
void (STDCALL* DriverGL11::EdgeFlagv)(const GLboolean* flag) = NULL;
void (STDCALL* DriverGL11::Enable)(GLenum cap) = NULL;
void (STDCALL* DriverGL11::EnableClientState)(GLenum array) = NULL;
void (STDCALL* DriverGL11::End)(void) = NULL;
void (STDCALL* DriverGL11::EndList)(void) = NULL;
void (STDCALL* DriverGL11::EvalCoord1d)(GLdouble u) = NULL;
void (STDCALL* DriverGL11::EvalCoord1dv)(const GLdouble* u) = NULL;
void (STDCALL* DriverGL11::EvalCoord1f)(GLfloat u) = NULL;
void (STDCALL* DriverGL11::EvalCoord1fv)(const GLfloat* u) = NULL;
void (STDCALL* DriverGL11::EvalCoord2d)(GLdouble u, GLdouble v) = NULL;
void (STDCALL* DriverGL11::EvalCoord2dv)(const GLdouble* u) = NULL;
void (STDCALL* DriverGL11::EvalCoord2f)(GLfloat u, GLfloat v) = NULL;
void (STDCALL* DriverGL11::EvalCoord2fv)(const GLfloat* u) = NULL;
void (STDCALL* DriverGL11::EvalMesh1)(GLenum mode, GLint i1, GLint i2) = NULL;
void (STDCALL* DriverGL11::EvalMesh2)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) = NULL;
void (STDCALL* DriverGL11::EvalPoint1)(GLint i) = NULL;
void (STDCALL* DriverGL11::EvalPoint2)(GLint i, GLint j) = NULL;
void (STDCALL* DriverGL11::FeedbackBuffer)(GLsizei size, GLenum type, GLfloat* buffer) = NULL;
void (STDCALL* DriverGL11::Finish)(void) = NULL;
void (STDCALL* DriverGL11::Flush)(void) = NULL;
void (STDCALL* DriverGL11::Fogf)(GLenum pname, GLfloat param) = NULL;
void (STDCALL* DriverGL11::Fogfv)(GLenum pname, const GLfloat* params) = NULL;
void (STDCALL* DriverGL11::Fogi)(GLenum pname, GLint param) = NULL;
void (STDCALL* DriverGL11::Fogiv)(GLenum pname, const GLint* params) = NULL;
void (STDCALL* DriverGL11::FrontFace)(GLenum mode) = NULL;
void (STDCALL* DriverGL11::Frustum)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = NULL;
GLuint (STDCALL* DriverGL11::GenLists)(GLsizei range) = NULL;
void (STDCALL* DriverGL11::GenTextures)(GLsizei n, GLuint* textures) = NULL;
void (STDCALL* DriverGL11::GetBooleanv)(GLenum pname, GLboolean* params) = NULL;
void (STDCALL* DriverGL11::GetClipPlane)(GLenum plane, GLdouble* equation) = NULL;
void (STDCALL* DriverGL11::GetDoublev)(GLenum pname, GLdouble* params) = NULL;
GLenum (STDCALL* DriverGL11::GetError)(void) = NULL;
void (STDCALL* DriverGL11::GetFloatv)(GLenum pname, GLfloat* params) = NULL;
void (STDCALL* DriverGL11::GetIntegerv)(GLenum pname, GLint* params) = NULL;
void (STDCALL* DriverGL11::GetLightfv)(GLenum light, GLenum pname, GLfloat* params) = NULL;
void (STDCALL* DriverGL11::GetLightiv)(GLenum light, GLenum pname, GLint* params) = NULL;
void (STDCALL* DriverGL11::GetMapdv)(GLenum target, GLenum query, GLdouble* v) = NULL;
void (STDCALL* DriverGL11::GetMapfv)(GLenum target, GLenum query, GLfloat* v) = NULL;
void (STDCALL* DriverGL11::GetMapiv)(GLenum target, GLenum query, GLint* v) = NULL;
void (STDCALL* DriverGL11::GetMaterialfv)(GLenum face, GLenum pname, GLfloat* params) = NULL;
void (STDCALL* DriverGL11::GetMaterialiv)(GLenum face, GLenum pname, GLint* params) = NULL;
void (STDCALL* DriverGL11::GetPixelMapfv)(GLenum map, GLfloat* values) = NULL;
void (STDCALL* DriverGL11::GetPixelMapuiv)(GLenum map, GLuint* values) = NULL;
void (STDCALL* DriverGL11::GetPixelMapusv)(GLenum map, GLushort* values) = NULL;
void (STDCALL* DriverGL11::GetPointerv)(GLenum pname, GLvoid** params) = NULL;
void (STDCALL* DriverGL11::GetPolygonStipple)(GLubyte* mask) = NULL;
const GLubyte*  (STDCALL* DriverGL11::GetString)(GLenum name) = NULL;
void (STDCALL* DriverGL11::GetTexEnvfv)(GLenum target, GLenum pname, GLfloat* params) = NULL;
void (STDCALL* DriverGL11::GetTexEnviv)(GLenum target, GLenum pname, GLint* params) = NULL;
void (STDCALL* DriverGL11::GetTexGendv)(GLenum coord, GLenum pname, GLdouble* params) = NULL;
void (STDCALL* DriverGL11::GetTexGenfv)(GLenum coord, GLenum pname, GLfloat* params) = NULL;
void (STDCALL* DriverGL11::GetTexGeniv)(GLenum coord, GLenum pname, GLint* params) = NULL;
void (STDCALL* DriverGL11::GetTexImage)(GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels) = NULL;
void (STDCALL* DriverGL11::GetTexLevelParameterfv)(GLenum target, GLint level, GLenum pname, GLfloat* params) = NULL;
void (STDCALL* DriverGL11::GetTexLevelParameteriv)(GLenum target, GLint level, GLenum pname, GLint* params) = NULL;
void (STDCALL* DriverGL11::GetTexParameterfv)(GLenum target, GLenum pname, GLfloat* params) = NULL;
void (STDCALL* DriverGL11::GetTexParameteriv)(GLenum target, GLenum pname, GLint* params) = NULL;
void (STDCALL* DriverGL11::Hint)(GLenum target, GLenum mode) = NULL;
void (STDCALL* DriverGL11::IndexMask)(GLuint mask) = NULL;
void (STDCALL* DriverGL11::IndexPointer)(GLenum type, GLsizei stride, const GLvoid* pointer) = NULL;
void (STDCALL* DriverGL11::Indexd)(GLdouble c) = NULL;
void (STDCALL* DriverGL11::Indexdv)(const GLdouble* c) = NULL;
void (STDCALL* DriverGL11::Indexf)(GLfloat c) = NULL;
void (STDCALL* DriverGL11::Indexfv)(const GLfloat* c) = NULL;
void (STDCALL* DriverGL11::Indexi)(GLint c) = NULL;
void (STDCALL* DriverGL11::Indexiv)(const GLint* c) = NULL;
void (STDCALL* DriverGL11::Indexs)(GLshort c) = NULL;
void (STDCALL* DriverGL11::Indexsv)(const GLshort* c) = NULL;
void (STDCALL* DriverGL11::Indexub)(GLubyte c) = NULL;
void (STDCALL* DriverGL11::Indexubv)(const GLubyte* c) = NULL;
void (STDCALL* DriverGL11::InitNames)(void) = NULL;
void (STDCALL* DriverGL11::InterleavedArrays)(GLenum format, GLsizei stride, const GLvoid* pointer) = NULL;
GLboolean (STDCALL* DriverGL11::IsEnabled)(GLenum cap) = NULL;
GLboolean (STDCALL* DriverGL11::IsList)(GLuint list) = NULL;
GLboolean (STDCALL* DriverGL11::IsTexture)(GLuint texture) = NULL;
void (STDCALL* DriverGL11::LightModelf)(GLenum pname, GLfloat param) = NULL;
void (STDCALL* DriverGL11::LightModelfv)(GLenum pname, const GLfloat* params) = NULL;
void (STDCALL* DriverGL11::LightModeli)(GLenum pname, GLint param) = NULL;
void (STDCALL* DriverGL11::LightModeliv)(GLenum pname, const GLint* params) = NULL;
void (STDCALL* DriverGL11::Lightf)(GLenum light, GLenum pname, GLfloat param) = NULL;
void (STDCALL* DriverGL11::Lightfv)(GLenum light, GLenum pname, const GLfloat* params) = NULL;
void (STDCALL* DriverGL11::Lighti)(GLenum light, GLenum pname, GLint param) = NULL;
void (STDCALL* DriverGL11::Lightiv)(GLenum light, GLenum pname, const GLint* params) = NULL;
void (STDCALL* DriverGL11::LineStipple)(GLint factor, GLushort pattern) = NULL;
void (STDCALL* DriverGL11::LineWidth)(GLfloat width) = NULL;
void (STDCALL* DriverGL11::ListBase)(GLuint base) = NULL;
void (STDCALL* DriverGL11::LoadIdentity)(void) = NULL;
void (STDCALL* DriverGL11::LoadMatrixd)(const GLdouble* m) = NULL;
void (STDCALL* DriverGL11::LoadMatrixf)(const GLfloat* m) = NULL;
void (STDCALL* DriverGL11::LoadName)(GLuint name) = NULL;
void (STDCALL* DriverGL11::LogicOp)(GLenum opcode) = NULL;
void (STDCALL* DriverGL11::Map1d)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points) = NULL;
void (STDCALL* DriverGL11::Map1f)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points) = NULL;
void (STDCALL* DriverGL11::Map2d)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points) = NULL;
void (STDCALL* DriverGL11::Map2f)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points) = NULL;
void (STDCALL* DriverGL11::MapGrid1d)(GLint un, GLdouble u1, GLdouble u2) = NULL;
void (STDCALL* DriverGL11::MapGrid1f)(GLint un, GLfloat u1, GLfloat u2) = NULL;
void (STDCALL* DriverGL11::MapGrid2d)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) = NULL;
void (STDCALL* DriverGL11::MapGrid2f)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) = NULL;
void (STDCALL* DriverGL11::Materialf)(GLenum face, GLenum pname, GLfloat param) = NULL;
void (STDCALL* DriverGL11::Materialfv)(GLenum face, GLenum pname, const GLfloat* params) = NULL;
void (STDCALL* DriverGL11::Materiali)(GLenum face, GLenum pname, GLint param) = NULL;
void (STDCALL* DriverGL11::Materialiv)(GLenum face, GLenum pname, const GLint* params) = NULL;
void (STDCALL* DriverGL11::MatrixMode)(GLenum mode) = NULL;
void (STDCALL* DriverGL11::MultMatrixd)(const GLdouble* m) = NULL;
void (STDCALL* DriverGL11::MultMatrixf)(const GLfloat* m) = NULL;
void (STDCALL* DriverGL11::NewList)(GLuint list, GLenum mode) = NULL;
void (STDCALL* DriverGL11::Normal3b)(GLbyte nx, GLbyte ny, GLbyte nz) = NULL;
void (STDCALL* DriverGL11::Normal3bv)(const GLbyte* v) = NULL;
void (STDCALL* DriverGL11::Normal3d)(GLdouble nx, GLdouble ny, GLdouble nz) = NULL;
void (STDCALL* DriverGL11::Normal3dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::Normal3f)(GLfloat nx, GLfloat ny, GLfloat nz) = NULL;
void (STDCALL* DriverGL11::Normal3fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::Normal3i)(GLint nx, GLint ny, GLint nz) = NULL;
void (STDCALL* DriverGL11::Normal3iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::Normal3s)(GLshort nx, GLshort ny, GLshort nz) = NULL;
void (STDCALL* DriverGL11::Normal3sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::NormalPointer)(GLenum type, GLsizei stride, const GLvoid* pointer) = NULL;
void (STDCALL* DriverGL11::Ortho)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = NULL;
void (STDCALL* DriverGL11::PassThrough)(GLfloat token) = NULL;
void (STDCALL* DriverGL11::PixelMapfv)(GLenum map, GLsizei mapsize, const GLfloat* values) = NULL;
void (STDCALL* DriverGL11::PixelMapuiv)(GLenum map, GLsizei mapsize, const GLuint* values) = NULL;
void (STDCALL* DriverGL11::PixelMapusv)(GLenum map, GLsizei mapsize, const GLushort* values) = NULL;
void (STDCALL* DriverGL11::PixelStoref)(GLenum pname, GLfloat param) = NULL;
void (STDCALL* DriverGL11::PixelStorei)(GLenum pname, GLint param) = NULL;
void (STDCALL* DriverGL11::PixelTransferf)(GLenum pname, GLfloat param) = NULL;
void (STDCALL* DriverGL11::PixelTransferi)(GLenum pname, GLint param) = NULL;
void (STDCALL* DriverGL11::PixelZoom)(GLfloat xfactor, GLfloat yfactor) = NULL;
void (STDCALL* DriverGL11::PointSize)(GLfloat size) = NULL;
void (STDCALL* DriverGL11::PolygonMode)(GLenum face, GLenum mode) = NULL;
void (STDCALL* DriverGL11::PolygonOffset)(GLfloat factor, GLfloat units) = NULL;
void (STDCALL* DriverGL11::PolygonStipple)(const GLubyte* mask) = NULL;
void (STDCALL* DriverGL11::PopAttrib)(void) = NULL;
void (STDCALL* DriverGL11::PopClientAttrib)(void) = NULL;
void (STDCALL* DriverGL11::PopMatrix)(void) = NULL;
void (STDCALL* DriverGL11::PopName)(void) = NULL;
void (STDCALL* DriverGL11::PrioritizeTextures)(GLsizei n, const GLuint* textures, const GLclampf* priorities) = NULL;
void (STDCALL* DriverGL11::PushAttrib)(GLbitfield mask) = NULL;
void (STDCALL* DriverGL11::PushClientAttrib)(GLbitfield mask) = NULL;
void (STDCALL* DriverGL11::PushMatrix)(void) = NULL;
void (STDCALL* DriverGL11::PushName)(GLuint name) = NULL;
void (STDCALL* DriverGL11::RasterPos2d)(GLdouble x, GLdouble y) = NULL;
void (STDCALL* DriverGL11::RasterPos2dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::RasterPos2f)(GLfloat x, GLfloat y) = NULL;
void (STDCALL* DriverGL11::RasterPos2fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::RasterPos2i)(GLint x, GLint y) = NULL;
void (STDCALL* DriverGL11::RasterPos2iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::RasterPos2s)(GLshort x, GLshort y) = NULL;
void (STDCALL* DriverGL11::RasterPos2sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::RasterPos3d)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (STDCALL* DriverGL11::RasterPos3dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::RasterPos3f)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (STDCALL* DriverGL11::RasterPos3fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::RasterPos3i)(GLint x, GLint y, GLint z) = NULL;
void (STDCALL* DriverGL11::RasterPos3iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::RasterPos3s)(GLshort x, GLshort y, GLshort z) = NULL;
void (STDCALL* DriverGL11::RasterPos3sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::RasterPos4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w) = NULL;
void (STDCALL* DriverGL11::RasterPos4dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::RasterPos4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w) = NULL;
void (STDCALL* DriverGL11::RasterPos4fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::RasterPos4i)(GLint x, GLint y, GLint z, GLint w) = NULL;
void (STDCALL* DriverGL11::RasterPos4iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::RasterPos4s)(GLshort x, GLshort y, GLshort z, GLshort w) = NULL;
void (STDCALL* DriverGL11::RasterPos4sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::ReadBuffer)(GLenum mode) = NULL;
void (STDCALL* DriverGL11::ReadPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels) = NULL;
void (STDCALL* DriverGL11::Rectd)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) = NULL;
void (STDCALL* DriverGL11::Rectdv)(const GLdouble* v1, const GLdouble* v2) = NULL;
void (STDCALL* DriverGL11::Rectf)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) = NULL;
void (STDCALL* DriverGL11::Rectfv)(const GLfloat* v1, const GLfloat* v2) = NULL;
void (STDCALL* DriverGL11::Recti)(GLint x1, GLint y1, GLint x2, GLint y2) = NULL;
void (STDCALL* DriverGL11::Rectiv)(const GLint* v1, const GLint* v2) = NULL;
void (STDCALL* DriverGL11::Rects)(GLshort x1, GLshort y1, GLshort x2, GLshort y2) = NULL;
void (STDCALL* DriverGL11::Rectsv)(const GLshort* v1, const GLshort* v2) = NULL;
GLint (STDCALL* DriverGL11::RenderMode)(GLenum mode) = NULL;
void (STDCALL* DriverGL11::Rotated)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) = NULL;
void (STDCALL* DriverGL11::Rotatef)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) = NULL;
void (STDCALL* DriverGL11::Scaled)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (STDCALL* DriverGL11::Scalef)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (STDCALL* DriverGL11::Scissor)(GLint x, GLint y, GLsizei width, GLsizei height) = NULL;
void (STDCALL* DriverGL11::SelectBuffer)(GLsizei size, GLuint* buffer) = NULL;
void (STDCALL* DriverGL11::ShadeModel)(GLenum mode) = NULL;
void (STDCALL* DriverGL11::StencilFunc)(GLenum func, GLint ref, GLuint mask) = NULL;
void (STDCALL* DriverGL11::StencilMask)(GLuint mask) = NULL;
void (STDCALL* DriverGL11::StencilOp)(GLenum fail, GLenum zfail, GLenum zpass) = NULL;
void (STDCALL* DriverGL11::TexCoord1d)(GLdouble s) = NULL;
void (STDCALL* DriverGL11::TexCoord1dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::TexCoord1f)(GLfloat s) = NULL;
void (STDCALL* DriverGL11::TexCoord1fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::TexCoord1i)(GLint s) = NULL;
void (STDCALL* DriverGL11::TexCoord1iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::TexCoord1s)(GLshort s) = NULL;
void (STDCALL* DriverGL11::TexCoord1sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::TexCoord2d)(GLdouble s, GLdouble t) = NULL;
void (STDCALL* DriverGL11::TexCoord2dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::TexCoord2f)(GLfloat s, GLfloat t) = NULL;
void (STDCALL* DriverGL11::TexCoord2fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::TexCoord2i)(GLint s, GLint t) = NULL;
void (STDCALL* DriverGL11::TexCoord2iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::TexCoord2s)(GLshort s, GLshort t) = NULL;
void (STDCALL* DriverGL11::TexCoord2sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::TexCoord3d)(GLdouble s, GLdouble t, GLdouble r) = NULL;
void (STDCALL* DriverGL11::TexCoord3dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::TexCoord3f)(GLfloat s, GLfloat t, GLfloat r) = NULL;
void (STDCALL* DriverGL11::TexCoord3fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::TexCoord3i)(GLint s, GLint t, GLint r) = NULL;
void (STDCALL* DriverGL11::TexCoord3iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::TexCoord3s)(GLshort s, GLshort t, GLshort r) = NULL;
void (STDCALL* DriverGL11::TexCoord3sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::TexCoord4d)(GLdouble s, GLdouble t, GLdouble r, GLdouble q) = NULL;
void (STDCALL* DriverGL11::TexCoord4dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::TexCoord4f)(GLfloat s, GLfloat t, GLfloat r, GLfloat q) = NULL;
void (STDCALL* DriverGL11::TexCoord4fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::TexCoord4i)(GLint s, GLint t, GLint r, GLint q) = NULL;
void (STDCALL* DriverGL11::TexCoord4iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::TexCoord4s)(GLshort s, GLshort t, GLshort r, GLshort q) = NULL;
void (STDCALL* DriverGL11::TexCoord4sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::TexCoordPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer) = NULL;
void (STDCALL* DriverGL11::TexEnvf)(GLenum target, GLenum pname, GLfloat param) = NULL;
void (STDCALL* DriverGL11::TexEnvfv)(GLenum target, GLenum pname, const GLfloat* params) = NULL;
void (STDCALL* DriverGL11::TexEnvi)(GLenum target, GLenum pname, GLint param) = NULL;
void (STDCALL* DriverGL11::TexEnviv)(GLenum target, GLenum pname, const GLint* params) = NULL;
void (STDCALL* DriverGL11::TexGend)(GLenum coord, GLenum pname, GLdouble param) = NULL;
void (STDCALL* DriverGL11::TexGendv)(GLenum coord, GLenum pname, const GLdouble* params) = NULL;
void (STDCALL* DriverGL11::TexGenf)(GLenum coord, GLenum pname, GLfloat param) = NULL;
void (STDCALL* DriverGL11::TexGenfv)(GLenum coord, GLenum pname, const GLfloat* params) = NULL;
void (STDCALL* DriverGL11::TexGeni)(GLenum coord, GLenum pname, GLint param) = NULL;
void (STDCALL* DriverGL11::TexGeniv)(GLenum coord, GLenum pname, const GLint* params) = NULL;
void (STDCALL* DriverGL11::TexImage1D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid* pixels) = NULL;
void (STDCALL* DriverGL11::TexImage2D)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels) = NULL;
void (STDCALL* DriverGL11::TexParameterf)(GLenum target, GLenum pname, GLfloat param) = NULL;
void (STDCALL* DriverGL11::TexParameterfv)(GLenum target, GLenum pname, const GLfloat* params) = NULL;
void (STDCALL* DriverGL11::TexParameteri)(GLenum target, GLenum pname, GLint param) = NULL;
void (STDCALL* DriverGL11::TexParameteriv)(GLenum target, GLenum pname, const GLint* params) = NULL;
void (STDCALL* DriverGL11::TexSubImage1D)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels) = NULL;
void (STDCALL* DriverGL11::TexSubImage2D)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels) = NULL;
void (STDCALL* DriverGL11::Translated)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (STDCALL* DriverGL11::Translatef)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (STDCALL* DriverGL11::Vertex2d)(GLdouble x, GLdouble y) = NULL;
void (STDCALL* DriverGL11::Vertex2dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::Vertex2f)(GLfloat x, GLfloat y) = NULL;
void (STDCALL* DriverGL11::Vertex2fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::Vertex2i)(GLint x, GLint y) = NULL;
void (STDCALL* DriverGL11::Vertex2iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::Vertex2s)(GLshort x, GLshort y) = NULL;
void (STDCALL* DriverGL11::Vertex2sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::Vertex3d)(GLdouble x, GLdouble y, GLdouble z) = NULL;
void (STDCALL* DriverGL11::Vertex3dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::Vertex3f)(GLfloat x, GLfloat y, GLfloat z) = NULL;
void (STDCALL* DriverGL11::Vertex3fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::Vertex3i)(GLint x, GLint y, GLint z) = NULL;
void (STDCALL* DriverGL11::Vertex3iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::Vertex3s)(GLshort x, GLshort y, GLshort z) = NULL;
void (STDCALL* DriverGL11::Vertex3sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::Vertex4d)(GLdouble x, GLdouble y, GLdouble z, GLdouble w) = NULL;
void (STDCALL* DriverGL11::Vertex4dv)(const GLdouble* v) = NULL;
void (STDCALL* DriverGL11::Vertex4f)(GLfloat x, GLfloat y, GLfloat z, GLfloat w) = NULL;
void (STDCALL* DriverGL11::Vertex4fv)(const GLfloat* v) = NULL;
void (STDCALL* DriverGL11::Vertex4i)(GLint x, GLint y, GLint z, GLint w) = NULL;
void (STDCALL* DriverGL11::Vertex4iv)(const GLint* v) = NULL;
void (STDCALL* DriverGL11::Vertex4s)(GLshort x, GLshort y, GLshort z, GLshort w) = NULL;
void (STDCALL* DriverGL11::Vertex4sv)(const GLshort* v) = NULL;
void (STDCALL* DriverGL11::VertexPointer)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer) = NULL;
void (STDCALL* DriverGL11::Viewport)(GLint x, GLint y, GLsizei width, GLsizei height) = NULL;


// wgl
BOOL  (STDCALL* DriverGL11::wglCopyContext)(HGLRC, HGLRC, UINT) = NULL;
HGLRC (STDCALL* DriverGL11::wglCreateContext)(HDC) = NULL;
HGLRC (STDCALL* DriverGL11::wglCreateLayerContext)(HDC, int) = NULL;
BOOL  (STDCALL* DriverGL11::wglDeleteContext)(HGLRC) = NULL;
HGLRC (STDCALL* DriverGL11::wglGetCurrentContext)(VOID) = NULL;
HDC   (STDCALL* DriverGL11::wglGetCurrentDC)(VOID) = NULL;
PROC  (STDCALL* DriverGL11::wglGetProcAddress)(LPCSTR) = NULL;
BOOL  (STDCALL* DriverGL11::wglMakeCurrent)(HDC, HGLRC) = NULL;
BOOL  (STDCALL* DriverGL11::wglShareLists)(HGLRC, HGLRC) = NULL;
BOOL  (STDCALL* DriverGL11::wglUseFontBitmapsA)(HDC, DWORD, DWORD, DWORD) = NULL;
BOOL  (STDCALL* DriverGL11::wglUseFontBitmapsW)(HDC, DWORD, DWORD, DWORD) = NULL;
BOOL  (STDCALL* DriverGL11::wglSwapBuffers)(HDC) = NULL;
BOOL  (STDCALL* DriverGL11::wglUseFontOutlinesA)(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT) = NULL;
BOOL  (STDCALL* DriverGL11::wglUseFontOutlinesW)(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT) = NULL;
BOOL  (STDCALL* DriverGL11::wglDescribeLayerPlane)(HDC, int, int, UINT, LPLAYERPLANEDESCRIPTOR) = NULL;
int   (STDCALL* DriverGL11::wglSetLayerPaletteEntries)(HDC, int, int, int, CONST COLORREF *) = NULL;
int   (STDCALL* DriverGL11::wglGetLayerPaletteEntries)(HDC, int, int, int, COLORREF *) = NULL;
BOOL  (STDCALL* DriverGL11::wglRealizeLayerPalette)(HDC, int, BOOL) = NULL;
BOOL  (STDCALL* DriverGL11::wglSwapLayerBuffers)(HDC, UINT) = NULL;
DWORD (STDCALL* DriverGL11::wglSwapMultipleBuffers)(UINT, CONST WGLSWAP *) = NULL;

void DriverGL11::LoadLib(void)
{
	if(NULL != _lib){
		return;
	}

	_lib = LoadLibraryA("OpenGL32.dll");

	// core functionality
	Accum = (void (STDCALL*)(GLenum op, GLfloat value))GetProcAddress(_lib, "glAccum");
	AlphaFunc = (void (STDCALL*)(GLenum op, GLfloat value))GetProcAddress(_lib, "glAlphaFunc");
	AreTexturesResident = (GLboolean (STDCALL*)(GLsizei n, const GLuint* textures, GLboolean* residences))GetProcAddress(_lib, "glAreTexturesResident");
	ArrayElement = (void (STDCALL*)(GLint i))GetProcAddress(_lib, "glArrayElement");
	Begin = (void (STDCALL*)(GLenum mode))GetProcAddress(_lib, "glBegin");
	BindTexture = (void (STDCALL*)(GLenum target, GLuint texture))GetProcAddress(_lib, "glBindTexture");
	Bitmap = (void (STDCALL*)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte* bitmap))GetProcAddress(_lib, "glBitmap");
	BlendFunc = (void (STDCALL*)(GLenum sfactor, GLenum dfactor))GetProcAddress(_lib, "glBlendFunc");
	CallList = (void (STDCALL*)(GLuint list))GetProcAddress(_lib, "glCallList");
	CallLists = (void (STDCALL*)(GLsizei n, GLenum type, const GLvoid* lists))GetProcAddress(_lib, "glCallLists");
	Clear = (void (STDCALL*)(GLbitfield mask))GetProcAddress(_lib, "glClear");
	ClearAccum = (void (STDCALL*)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))GetProcAddress(_lib, "glClearAccum");
	ClearColor = (void (STDCALL*)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha))GetProcAddress(_lib, "glClearColor");
	ClearDepth = (void (STDCALL*)(GLclampd depth))GetProcAddress(_lib, "glClearDepth");
	ClearIndex = (void (STDCALL*)(GLfloat c))GetProcAddress(_lib, "glClearIndex");
	ClearStencil = (void (STDCALL*)(GLint s))GetProcAddress(_lib, "glClearStencil");
	ClipPlane = (void (STDCALL*)(GLenum plane, const GLdouble* equation))GetProcAddress(_lib, "glClipPlane");
	Color3b = (void (STDCALL*)(GLbyte red, GLbyte green, GLbyte blue))GetProcAddress(_lib, "glColor3b");
	Color3bv = (void (STDCALL*)(const GLbyte* v))GetProcAddress(_lib, "glColor3bv");
	Color3d = (void (STDCALL*)(GLdouble red, GLdouble green, GLdouble blue))GetProcAddress(_lib, "glColor3d");
	Color3dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glColor3dv");
	Color3f = (void (STDCALL*)(GLfloat red, GLfloat green, GLfloat blue))GetProcAddress(_lib, "glColor3f");
	Color3fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glColor3fv");
	Color3i = (void (STDCALL*)(GLint red, GLint green, GLint blue))GetProcAddress(_lib, "glColor3i");
	Color3iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glColor3iv");
	Color3s = (void (STDCALL*)(GLshort red, GLshort green, GLshort blue))GetProcAddress(_lib, "glColor3s");
	Color3sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glColor3sv");
	Color3ub = (void (STDCALL*)(GLubyte red, GLubyte green, GLubyte blue))GetProcAddress(_lib, "glColor3ub");
	Color3ubv = (void (STDCALL*)(const GLubyte* v))GetProcAddress(_lib, "glColor3ubv");
	Color3ui = (void (STDCALL*)(GLuint red, GLuint green, GLuint blue))GetProcAddress(_lib, "glColor3ui");
	Color3uiv = (void (STDCALL*)(const GLuint* v))GetProcAddress(_lib, "glColor3uiv");
	Color3us = (void (STDCALL*)(GLushort red, GLushort green, GLushort blue))GetProcAddress(_lib, "glColor3us");
	Color3usv = (void (STDCALL*)(const GLushort* v))GetProcAddress(_lib, "glColor3usv");
	Color4b = (void (STDCALL*)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha))GetProcAddress(_lib, "glColor4b");
	Color4bv = (void (STDCALL*)(const GLbyte* v))GetProcAddress(_lib, "glColor4bv");
	Color4d = (void (STDCALL*)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha))GetProcAddress(_lib, "glColor4d");
	Color4dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glColor4dv");
	Color4f = (void (STDCALL*)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha))GetProcAddress(_lib, "glColor4f");
	Color4fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glColor4fv");
	Color4i = (void (STDCALL*)(GLint red, GLint green, GLint blue, GLint alpha))GetProcAddress(_lib, "glColor4i");
	Color4iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glColor4iv");
	Color4s = (void (STDCALL*)(GLshort red, GLshort green, GLshort blue, GLshort alpha))GetProcAddress(_lib, "glColor4s");
	Color4sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glColor4sv");
	Color4ub = (void (STDCALL*)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha))GetProcAddress(_lib, "glColor4ub");
	Color4ubv = (void (STDCALL*)(const GLubyte* v))GetProcAddress(_lib, "glColor4ubv");
	Color4ui = (void (STDCALL*)(GLuint red, GLuint green, GLuint blue, GLuint alpha))GetProcAddress(_lib, "glColor4ui");
	Color4uiv = (void (STDCALL*)(const GLuint* v))GetProcAddress(_lib, "glColor4uiv");
	Color4us = (void (STDCALL*)(GLushort red, GLushort green, GLushort blue, GLushort alpha))GetProcAddress(_lib, "glColor4us");
	Color4usv = (void (STDCALL*)(const GLushort* v))GetProcAddress(_lib, "glColor4usv");
	ColorMask = (void (STDCALL*)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha))GetProcAddress(_lib, "glColorMask");
	ColorMaterial = (void (STDCALL*)(GLenum face, GLenum mode))GetProcAddress(_lib, "glColorMaterial");
	ColorPointer = (void (STDCALL*)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer))GetProcAddress(_lib, "glColorPointer");
	CopyPixels = (void (STDCALL*)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type))GetProcAddress(_lib, "glCopyPixels");
	CopyTexImage1D = (void (STDCALL*)(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border))GetProcAddress(_lib, "glCopyTexImage1D");
	CopyTexImage2D = (void (STDCALL*)(GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border))GetProcAddress(_lib, "glCopyTexImage2D");
	CopyTexSubImage1D = (void (STDCALL*)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width))GetProcAddress(_lib, "glCopyTexSubImage1D");
	CopyTexSubImage2D = (void (STDCALL*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height))GetProcAddress(_lib, "glCopyTexSubImage2D");
	CullFace = (void (STDCALL*)(GLenum mode))GetProcAddress(_lib, "glCullFace");
	DeleteLists = (void (STDCALL*)(GLuint list, GLsizei range))GetProcAddress(_lib, "glDeleteLists");
	DeleteTextures = (void (STDCALL*)(GLsizei n, const GLuint* textures))GetProcAddress(_lib, "glDeleteTextures");
	DepthFunc = (void (STDCALL*)(GLenum func))GetProcAddress(_lib, "glDepthFunc");
	DepthMask = (void (STDCALL*)(GLboolean flag))GetProcAddress(_lib, "glDepthMask");
	DepthRange = (void (STDCALL*)(GLclampd zNear, GLclampd zFar))GetProcAddress(_lib, "glDepthRange");
	Disable = (void (STDCALL*)(GLenum cap))GetProcAddress(_lib, "glDisable");
	DisableClientState = (void (STDCALL*)(GLenum array))GetProcAddress(_lib, "glDisableClientState");
	DrawArrays = (void (STDCALL*)(GLenum mode, GLint first, GLsizei count))GetProcAddress(_lib, "glDrawArrays");
	DrawBuffer = (void (STDCALL*)(GLenum mode))GetProcAddress(_lib, "glDrawBuffer");
	DrawElements = (void (STDCALL*)(GLenum mode, GLsizei count, GLenum type, const GLvoid* indices))GetProcAddress(_lib, "glDrawElements");
	DrawPixels = (void (STDCALL*)(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels))GetProcAddress(_lib, "glDrawPixels");
	EdgeFlag = (void (STDCALL*)(GLboolean flag))GetProcAddress(_lib, "glEdgeFlag");
	EdgeFlagPointer = (void (STDCALL*)(GLsizei stride, const GLvoid* pointer))GetProcAddress(_lib, "glEdgeFlagPointer");
	EdgeFlagv = (void (STDCALL*)(const GLboolean* flag))GetProcAddress(_lib, "glEdgeFlagv");
	Enable = (void (STDCALL*)(GLenum cap))GetProcAddress(_lib, "glEnable");
	EnableClientState = (void (STDCALL*)(GLenum array))GetProcAddress(_lib, "glEnableClientState");
	End = (void (STDCALL*)(void))GetProcAddress(_lib, "glEnd");
	EndList = (void (STDCALL*)(void))GetProcAddress(_lib, "glEndList");
	EvalCoord1d = (void (STDCALL*)(GLdouble u))GetProcAddress(_lib, "glEvalCoord1d");
	EvalCoord1dv = (void (STDCALL*)(const GLdouble* u))GetProcAddress(_lib, "glEvalCoord1dv");
	EvalCoord1f = (void (STDCALL*)(GLfloat u))GetProcAddress(_lib, "glEvalCoord1f");
	EvalCoord1fv = (void (STDCALL*)(const GLfloat* u))GetProcAddress(_lib, "glEvalCoord1fv");
	EvalCoord2d = (void (STDCALL*)(GLdouble u, GLdouble v))GetProcAddress(_lib, "glEvalCoord2d");
	EvalCoord2dv = (void (STDCALL*)(const GLdouble* u))GetProcAddress(_lib, "glEvalCoord2dv");
	EvalCoord2f = (void (STDCALL*)(GLfloat u, GLfloat v))GetProcAddress(_lib, "glEvalCoord2f");
	EvalCoord2fv = (void (STDCALL*)(const GLfloat* u))GetProcAddress(_lib, "glEvalCoord2fv");
	EvalMesh1 = (void (STDCALL*)(GLenum mode, GLint i1, GLint i2))GetProcAddress(_lib, "glEvalMesh1");
	EvalMesh2 = (void (STDCALL*)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2))GetProcAddress(_lib, "glEvalMesh2");
	EvalPoint1 = (void (STDCALL*)(GLint i))GetProcAddress(_lib, "glEvalPoint1");
	EvalPoint2 = (void (STDCALL*)(GLint i, GLint j))GetProcAddress(_lib, "glEvalPoint2");
	FeedbackBuffer = (void (STDCALL*)(GLsizei size, GLenum type, GLfloat* buffer))GetProcAddress(_lib, "glFeedbackBuffer");
	Finish = (void (STDCALL*)(void))GetProcAddress(_lib, "glFinish");
	Flush = (void (STDCALL*)(void))GetProcAddress(_lib, "glFlush");
	Fogf = (void (STDCALL*)(GLenum pname, GLfloat param))GetProcAddress(_lib, "glFogf");
	Fogfv = (void (STDCALL*)(GLenum pname, const GLfloat* params))GetProcAddress(_lib, "glFogfv");
	Fogi = (void (STDCALL*)(GLenum pname, GLint param))GetProcAddress(_lib, "glFogi");
	Fogiv = (void (STDCALL*)(GLenum pname, const GLint* params))GetProcAddress(_lib, "glFogiv");
	FrontFace = (void (STDCALL*)(GLenum mode))GetProcAddress(_lib, "glFrontFace");
	Frustum = (void (STDCALL*)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))GetProcAddress(_lib, "glFrustum");
	GenLists = (GLuint (STDCALL*)(GLsizei range))GetProcAddress(_lib, "glGenLists");
	GenTextures = (void (STDCALL*)(GLsizei n, GLuint* textures))GetProcAddress(_lib, "glGenTextures");
	GetBooleanv = (void (STDCALL*)(GLenum pname, GLboolean* params))GetProcAddress(_lib, "glGetBooleanv");
	GetClipPlane = (void (STDCALL*)(GLenum plane, GLdouble* equation))GetProcAddress(_lib, "glGetClipPlane");
	GetDoublev = (void (STDCALL*)(GLenum pname, GLdouble* params))GetProcAddress(_lib, "glGetDoublev");
	GetError = (GLenum (STDCALL*)(void))GetProcAddress(_lib, "glGetError");
	GetFloatv = (void (STDCALL*)(GLenum pname, GLfloat* params))GetProcAddress(_lib, "glGetFloatv");
	GetIntegerv = (void (STDCALL*)(GLenum pname, GLint* params))GetProcAddress(_lib, "glGetIntegerv");
	GetLightfv = (void (STDCALL*)(GLenum light, GLenum pname, GLfloat* params))GetProcAddress(_lib, "glGetLightfv");
	GetLightiv = (void (STDCALL*)(GLenum light, GLenum pname, GLint* params))GetProcAddress(_lib, "glGetLightiv");
	GetMapdv = (void (STDCALL*)(GLenum target, GLenum query, GLdouble* v))GetProcAddress(_lib, "glGetMapdv");
	GetMapfv = (void (STDCALL*)(GLenum target, GLenum query, GLfloat* v))GetProcAddress(_lib, "glGetMapfv");
	GetMapiv = (void (STDCALL*)(GLenum target, GLenum query, GLint* v))GetProcAddress(_lib, "glGetMapiv");
	GetMaterialfv = (void (STDCALL*)(GLenum face, GLenum pname, GLfloat* params))GetProcAddress(_lib, "glGetMaterialfv");
	GetMaterialiv = (void (STDCALL*)(GLenum face, GLenum pname, GLint* params))GetProcAddress(_lib, "glGetMaterialiv");
	GetPixelMapfv = (void (STDCALL*)(GLenum map, GLfloat* values))GetProcAddress(_lib, "glGetPixelMapfv");
	GetPixelMapuiv = (void (STDCALL*)(GLenum map, GLuint* values))GetProcAddress(_lib, "glGetPixelMapuiv");
	GetPixelMapusv = (void (STDCALL*)(GLenum map, GLushort* values))GetProcAddress(_lib, "glGetPixelMapusv");
	GetPointerv = (void (STDCALL*)(GLenum pname, GLvoid** params))GetProcAddress(_lib, "glGetPointerv");
	GetPolygonStipple = (void (STDCALL*)(GLubyte* mask))GetProcAddress(_lib, "glGetPolygonStipple");
	GetString = (const GLubyte*  (STDCALL*)(GLenum name))GetProcAddress(_lib, "glGetString");
	GetTexEnvfv = (void (STDCALL*)(GLenum target, GLenum pname, GLfloat* params))GetProcAddress(_lib, "glGetTexEnvfv");
	GetTexEnviv = (void (STDCALL*)(GLenum target, GLenum pname, GLint* params))GetProcAddress(_lib, "glGetTexEnviv");
	GetTexGendv = (void (STDCALL*)(GLenum coord, GLenum pname, GLdouble* params))GetProcAddress(_lib, "glGetTexGendv");
	GetTexGenfv = (void (STDCALL*)(GLenum coord, GLenum pname, GLfloat* params))GetProcAddress(_lib, "glGetTexGenfv");
	GetTexGeniv = (void (STDCALL*)(GLenum coord, GLenum pname, GLint* params))GetProcAddress(_lib, "glGetTexGeniv");
	GetTexImage = (void (STDCALL*)(GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels))GetProcAddress(_lib, "glGetTexImage");
	GetTexLevelParameterfv = (void (STDCALL*)(GLenum target, GLint level, GLenum pname, GLfloat* params))GetProcAddress(_lib, "glGetTexLevelParameterfv");
	GetTexLevelParameteriv = (void (STDCALL*)(GLenum target, GLint level, GLenum pname, GLint* params))GetProcAddress(_lib, "glGetTexLevelParameteriv");
	GetTexParameterfv = (void (STDCALL*)(GLenum target, GLenum pname, GLfloat* params))GetProcAddress(_lib, "glGetTexParameterfv");
	GetTexParameteriv = (void (STDCALL*)(GLenum target, GLenum pname, GLint* params))GetProcAddress(_lib, "glGetTexParameteriv");
	Hint = (void (STDCALL*)(GLenum target, GLenum mode))GetProcAddress(_lib, "glHint");
	IndexMask = (void (STDCALL*)(GLuint mask))GetProcAddress(_lib, "glIndexMask");
	IndexPointer = (void (STDCALL*)(GLenum type, GLsizei stride, const GLvoid* pointer))GetProcAddress(_lib, "glIndexPointer");
	Indexd = (void (STDCALL*)(GLdouble c))GetProcAddress(_lib, "glIndexd");
	Indexdv = (void (STDCALL*)(const GLdouble* c))GetProcAddress(_lib, "glIndexdv");
	Indexf = (void (STDCALL*)(GLfloat c))GetProcAddress(_lib, "glIndexf");
	Indexfv = (void (STDCALL*)(const GLfloat* c))GetProcAddress(_lib, "glIndexfv");
	Indexi = (void (STDCALL*)(GLint c))GetProcAddress(_lib, "glIndexi");
	Indexiv = (void (STDCALL*)(const GLint* c))GetProcAddress(_lib, "glIndexiv");
	Indexs = (void (STDCALL*)(GLshort c))GetProcAddress(_lib, "glIndexs");
	Indexsv = (void (STDCALL*)(const GLshort* c))GetProcAddress(_lib, "glIndexsv");
	Indexub = (void (STDCALL*)(GLubyte c))GetProcAddress(_lib, "glIndexub");
	Indexubv = (void (STDCALL*)(const GLubyte* c))GetProcAddress(_lib, "glIndexubv");
	InitNames = (void (STDCALL*)(void))GetProcAddress(_lib, "glInitNames");
	InterleavedArrays = (void (STDCALL*)(GLenum format, GLsizei stride, const GLvoid* pointer))GetProcAddress(_lib, "glInterleavedArrays");
	IsEnabled = (GLboolean (STDCALL*)(GLenum cap))GetProcAddress(_lib, "glIsEnabled");
	IsList = (GLboolean (STDCALL*)(GLuint list))GetProcAddress(_lib, "glIsList");
	IsTexture = (GLboolean (STDCALL*)(GLuint texture))GetProcAddress(_lib, "glIsTexture");
	LightModelf = (void (STDCALL*)(GLenum pname, GLfloat param))GetProcAddress(_lib, "glLightModelf");
	LightModelfv = (void (STDCALL*)(GLenum pname, const GLfloat* params))GetProcAddress(_lib, "glLightModelfv");
	LightModeli = (void (STDCALL*)(GLenum pname, GLint param))GetProcAddress(_lib, "glLightModeli");
	LightModeliv = (void (STDCALL*)(GLenum pname, const GLint* params))GetProcAddress(_lib, "glLightModeliv");
	Lightf = (void (STDCALL*)(GLenum light, GLenum pname, GLfloat param))GetProcAddress(_lib, "glLightf");
	Lightfv = (void (STDCALL*)(GLenum light, GLenum pname, const GLfloat* params))GetProcAddress(_lib, "glLightfv");
	Lighti = (void (STDCALL*)(GLenum light, GLenum pname, GLint param))GetProcAddress(_lib, "glLighti");
	Lightiv = (void (STDCALL*)(GLenum light, GLenum pname, const GLint* params))GetProcAddress(_lib, "glLightiv");
	LineStipple = (void (STDCALL*)(GLint factor, GLushort pattern))GetProcAddress(_lib, "glLineStipple");
	LineWidth = (void (STDCALL*)(GLfloat width))GetProcAddress(_lib, "glLineWidth");
	ListBase = (void (STDCALL*)(GLuint base))GetProcAddress(_lib, "glListBase");
	LoadIdentity = (void (STDCALL*)(void))GetProcAddress(_lib, "glLoadIdentity");
	LoadMatrixd = (void (STDCALL*)(const GLdouble* m))GetProcAddress(_lib, "glLoadMatrixd");
	LoadMatrixf = (void (STDCALL*)(const GLfloat* m))GetProcAddress(_lib, "glLoadMatrixf");
	LoadName = (void (STDCALL*)(GLuint name))GetProcAddress(_lib, "glLoadName");
	LogicOp = (void (STDCALL*)(GLenum opcode))GetProcAddress(_lib, "glLogicOp");
	Map1d = (void (STDCALL*)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points))GetProcAddress(_lib, "glMap1d");
	Map1f = (void (STDCALL*)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points))GetProcAddress(_lib, "glMap1f");
	Map2d = (void (STDCALL*)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points))GetProcAddress(_lib, "glMap2d");
	Map2f = (void (STDCALL*)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points))GetProcAddress(_lib, "glMap2f");
	MapGrid1d = (void (STDCALL*)(GLint un, GLdouble u1, GLdouble u2))GetProcAddress(_lib, "glMapGrid1d");
	MapGrid1f = (void (STDCALL*)(GLint un, GLfloat u1, GLfloat u2))GetProcAddress(_lib, "glMapGrid1f");
	MapGrid2d = (void (STDCALL*)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2))GetProcAddress(_lib, "glMapGrid2d");
	MapGrid2f = (void (STDCALL*)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2))GetProcAddress(_lib, "glMapGrid2f");
	Materialf = (void (STDCALL*)(GLenum face, GLenum pname, GLfloat param))GetProcAddress(_lib, "glMaterialf");
	Materialfv = (void (STDCALL*)(GLenum face, GLenum pname, const GLfloat* params))GetProcAddress(_lib, "glMaterialfv");
	Materiali = (void (STDCALL*)(GLenum face, GLenum pname, GLint param))GetProcAddress(_lib, "glMateriali");
	Materialiv = (void (STDCALL*)(GLenum face, GLenum pname, const GLint* params))GetProcAddress(_lib, "glMaterialiv");
	MatrixMode = (void (STDCALL*)(GLenum mode))GetProcAddress(_lib, "glMatrixMode");
	MultMatrixd = (void (STDCALL*)(const GLdouble* m))GetProcAddress(_lib, "glMultMatrixd");
	MultMatrixf = (void (STDCALL*)(const GLfloat* m))GetProcAddress(_lib, "glMultMatrixf");
	NewList = (void (STDCALL*)(GLuint list, GLenum mode))GetProcAddress(_lib, "glNewList");
	Normal3b = (void (STDCALL*)(GLbyte nx, GLbyte ny, GLbyte nz))GetProcAddress(_lib, "glNormal3b");
	Normal3bv = (void (STDCALL*)(const GLbyte* v))GetProcAddress(_lib, "glNormal3bv");
	Normal3d = (void (STDCALL*)(GLdouble nx, GLdouble ny, GLdouble nz))GetProcAddress(_lib, "glNormal3d");
	Normal3dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glNormal3dv");
	Normal3f = (void (STDCALL*)(GLfloat nx, GLfloat ny, GLfloat nz))GetProcAddress(_lib, "glNormal3f");
	Normal3fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glNormal3fv");
	Normal3i = (void (STDCALL*)(GLint nx, GLint ny, GLint nz))GetProcAddress(_lib, "glNormal3i");
	Normal3iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glNormal3iv");
	Normal3s = (void (STDCALL*)(GLshort nx, GLshort ny, GLshort nz))GetProcAddress(_lib, "glNormal3s");
	Normal3sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glNormal3sv");
	NormalPointer = (void (STDCALL*)(GLenum type, GLsizei stride, const GLvoid* pointer))GetProcAddress(_lib, "glNormalPointer");
	Ortho = (void (STDCALL*)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar))GetProcAddress(_lib, "glOrtho");
	PassThrough = (void (STDCALL*)(GLfloat token))GetProcAddress(_lib, "glPassThrough");
	PixelMapfv = (void (STDCALL*)(GLenum map, GLsizei mapsize, const GLfloat* values))GetProcAddress(_lib, "glPixelMapfv");
	PixelMapuiv = (void (STDCALL*)(GLenum map, GLsizei mapsize, const GLuint* values))GetProcAddress(_lib, "glPixelMapuiv");
	PixelMapusv = (void (STDCALL*)(GLenum map, GLsizei mapsize, const GLushort* values))GetProcAddress(_lib, "glPixelMapusv");
	PixelStoref = (void (STDCALL*)(GLenum pname, GLfloat param))GetProcAddress(_lib, "glPixelStoref");
	PixelStorei = (void (STDCALL*)(GLenum pname, GLint param))GetProcAddress(_lib, "glPixelStorei");
	PixelTransferf = (void (STDCALL*)(GLenum pname, GLfloat param))GetProcAddress(_lib, "glPixelTransferf");
	PixelTransferi = (void (STDCALL*)(GLenum pname, GLint param))GetProcAddress(_lib, "glPixelTransferi");
	PixelZoom = (void (STDCALL*)(GLfloat xfactor, GLfloat yfactor))GetProcAddress(_lib, "glPixelZoom");
	PointSize = (void (STDCALL*)(GLfloat size))GetProcAddress(_lib, "glPointSize");
	PolygonMode = (void (STDCALL*)(GLenum face, GLenum mode))GetProcAddress(_lib, "glPolygonMode");
	PolygonOffset = (void (STDCALL*)(GLfloat factor, GLfloat units))GetProcAddress(_lib, "glPolygonOffset");
	PolygonStipple = (void (STDCALL*)(const GLubyte* mask))GetProcAddress(_lib, "glPolygonStipple");
	PopAttrib = (void (STDCALL*)(void))GetProcAddress(_lib, "glPopAttrib");
	PopClientAttrib = (void (STDCALL*)(void))GetProcAddress(_lib, "glPopClientAttrib");
	PopMatrix = (void (STDCALL*)(void))GetProcAddress(_lib, "glPopMatrix");
	PopName = (void (STDCALL*)(void))GetProcAddress(_lib, "glPopName");
	PrioritizeTextures = (void (STDCALL*)(GLsizei n, const GLuint* textures, const GLclampf* priorities))GetProcAddress(_lib, "glPrioritizeTextures");
	PushAttrib = (void (STDCALL*)(GLbitfield mask))GetProcAddress(_lib, "glPushAttrib");
	PushClientAttrib = (void (STDCALL*)(GLbitfield mask))GetProcAddress(_lib, "glPushClientAttrib");
	PushMatrix = (void (STDCALL*)(void))GetProcAddress(_lib, "glPushMatrix");
	PushName = (void (STDCALL*)(GLuint name))GetProcAddress(_lib, "glPushName");
	RasterPos2d = (void (STDCALL*)(GLdouble x, GLdouble y))GetProcAddress(_lib, "glRasterPos2d");
	RasterPos2dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glRasterPos2dv");
	RasterPos2f = (void (STDCALL*)(GLfloat x, GLfloat y))GetProcAddress(_lib, "glRasterPos2f");
	RasterPos2fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glRasterPos2fv");
	RasterPos2i = (void (STDCALL*)(GLint x, GLint y))GetProcAddress(_lib, "glRasterPos2i");
	RasterPos2iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glRasterPos2iv");
	RasterPos2s = (void (STDCALL*)(GLshort x, GLshort y))GetProcAddress(_lib, "glRasterPos2s");
	RasterPos2sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glRasterPos2sv");
	RasterPos3d = (void (STDCALL*)(GLdouble x, GLdouble y, GLdouble z))GetProcAddress(_lib, "glRasterPos3d");
	RasterPos3dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glRasterPos3dv");
	RasterPos3f = (void (STDCALL*)(GLfloat x, GLfloat y, GLfloat z))GetProcAddress(_lib, "glRasterPos3f");
	RasterPos3fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glRasterPos3fv");
	RasterPos3i = (void (STDCALL*)(GLint x, GLint y, GLint z))GetProcAddress(_lib, "glRasterPos3i");
	RasterPos3iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glRasterPos3iv");
	RasterPos3s = (void (STDCALL*)(GLshort x, GLshort y, GLshort z))GetProcAddress(_lib, "glRasterPos3s");
	RasterPos3sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glRasterPos3sv");
	RasterPos4d = (void (STDCALL*)(GLdouble x, GLdouble y, GLdouble z, GLdouble w))GetProcAddress(_lib, "glRasterPos4d");
	RasterPos4dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glRasterPos4dv");
	RasterPos4f = (void (STDCALL*)(GLfloat x, GLfloat y, GLfloat z, GLfloat w))GetProcAddress(_lib, "glRasterPos4f");
	RasterPos4fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glRasterPos4fv");
	RasterPos4i = (void (STDCALL*)(GLint x, GLint y, GLint z, GLint w))GetProcAddress(_lib, "glRasterPos4i");
	RasterPos4iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glRasterPos4iv");
	RasterPos4s = (void (STDCALL*)(GLshort x, GLshort y, GLshort z, GLshort w))GetProcAddress(_lib, "glRasterPos4s");
	RasterPos4sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glRasterPos4sv");
	ReadBuffer = (void (STDCALL*)(GLenum mode))GetProcAddress(_lib, "glReadBuffer");
	ReadPixels = (void (STDCALL*)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels))GetProcAddress(_lib, "glReadPixels");
	Rectd = (void (STDCALL*)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2))GetProcAddress(_lib, "glRectd");
	Rectdv = (void (STDCALL*)(const GLdouble* v1, const GLdouble* v2))GetProcAddress(_lib, "glRectdv");
	Rectf = (void (STDCALL*)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2))GetProcAddress(_lib, "glRectf");
	Rectfv = (void (STDCALL*)(const GLfloat* v1, const GLfloat* v2))GetProcAddress(_lib, "glRectfv");
	Recti = (void (STDCALL*)(GLint x1, GLint y1, GLint x2, GLint y2))GetProcAddress(_lib, "glRecti");
	Rectiv = (void (STDCALL*)(const GLint* v1, const GLint* v2))GetProcAddress(_lib, "glRectiv");
	Rects = (void (STDCALL*)(GLshort x1, GLshort y1, GLshort x2, GLshort y2))GetProcAddress(_lib, "glRects");
	Rectsv = (void (STDCALL*)(const GLshort* v1, const GLshort* v2))GetProcAddress(_lib, "glRectsv");
	RenderMode = (GLint (STDCALL*)(GLenum mode))GetProcAddress(_lib, "glRenderMode");
	Rotated = (void (STDCALL*)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z))GetProcAddress(_lib, "glRotated");
	Rotatef = (void (STDCALL*)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z))GetProcAddress(_lib, "glRotatef");
	Scaled = (void (STDCALL*)(GLdouble x, GLdouble y, GLdouble z))GetProcAddress(_lib, "glScaled");
	Scalef = (void (STDCALL*)(GLfloat x, GLfloat y, GLfloat z))GetProcAddress(_lib, "glScalef");
	Scissor = (void (STDCALL*)(GLint x, GLint y, GLsizei width, GLsizei height))GetProcAddress(_lib, "glScissor");
	SelectBuffer = (void (STDCALL*)(GLsizei size, GLuint* buffer))GetProcAddress(_lib, "glSelectBuffer");
	ShadeModel = (void (STDCALL*)(GLenum mode))GetProcAddress(_lib, "glShadeModel");
	StencilFunc = (void (STDCALL*)(GLenum func, GLint ref, GLuint mask))GetProcAddress(_lib, "glStencilFunc");
	StencilMask = (void (STDCALL*)(GLuint mask))GetProcAddress(_lib, "glStencilMask");
	StencilOp = (void (STDCALL*)(GLenum fail, GLenum zfail, GLenum zpass))GetProcAddress(_lib, "glStencilOp");
	TexCoord1d = (void (STDCALL*)(GLdouble s))GetProcAddress(_lib, "glTexCoord1d");
	TexCoord1dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glTexCoord1dv");
	TexCoord1f = (void (STDCALL*)(GLfloat s))GetProcAddress(_lib, "glTexCoord1f");
	TexCoord1fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glTexCoord1fv");
	TexCoord1i = (void (STDCALL*)(GLint s))GetProcAddress(_lib, "glTexCoord1i");
	TexCoord1iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glTexCoord1iv");
	TexCoord1s = (void (STDCALL*)(GLshort s))GetProcAddress(_lib, "glTexCoord1s");
	TexCoord1sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glTexCoord1sv");
	TexCoord2d = (void (STDCALL*)(GLdouble s, GLdouble t))GetProcAddress(_lib, "glTexCoord2d");
	TexCoord2dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glTexCoord2dv");
	TexCoord2f = (void (STDCALL*)(GLfloat s, GLfloat t))GetProcAddress(_lib, "glTexCoord2f");
	TexCoord2fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glTexCoord2fv");
	TexCoord2i = (void (STDCALL*)(GLint s, GLint t))GetProcAddress(_lib, "glTexCoord2i");
	TexCoord2iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glTexCoord2iv");
	TexCoord2s = (void (STDCALL*)(GLshort s, GLshort t))GetProcAddress(_lib, "glTexCoord2s");
	TexCoord2sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glTexCoord2sv");
	TexCoord3d = (void (STDCALL*)(GLdouble s, GLdouble t, GLdouble r))GetProcAddress(_lib, "glTexCoord3d");
	TexCoord3dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glTexCoord3dv");
	TexCoord3f = (void (STDCALL*)(GLfloat s, GLfloat t, GLfloat r))GetProcAddress(_lib, "glTexCoord3f");
	TexCoord3fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glTexCoord3fv");
	TexCoord3i = (void (STDCALL*)(GLint s, GLint t, GLint r))GetProcAddress(_lib, "glTexCoord3i");
	TexCoord3iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glTexCoord3iv");
	TexCoord3s = (void (STDCALL*)(GLshort s, GLshort t, GLshort r))GetProcAddress(_lib, "glTexCoord3s");
	TexCoord3sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glTexCoord3sv");
	TexCoord4d = (void (STDCALL*)(GLdouble s, GLdouble t, GLdouble r, GLdouble q))GetProcAddress(_lib, "glTexCoord4d");
	TexCoord4dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glTexCoord4dv");
	TexCoord4f = (void (STDCALL*)(GLfloat s, GLfloat t, GLfloat r, GLfloat q))GetProcAddress(_lib, "glTexCoord4f");
	TexCoord4fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glTexCoord4fv");
	TexCoord4i = (void (STDCALL*)(GLint s, GLint t, GLint r, GLint q))GetProcAddress(_lib, "glTexCoord4i");
	TexCoord4iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glTexCoord4iv");
	TexCoord4s = (void (STDCALL*)(GLshort s, GLshort t, GLshort r, GLshort q))GetProcAddress(_lib, "glTexCoord4s");
	TexCoord4sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glTexCoord4sv");
	TexCoordPointer = (void (STDCALL*)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer))GetProcAddress(_lib, "glTexCoordPointer");
	TexEnvf = (void (STDCALL*)(GLenum target, GLenum pname, GLfloat param))GetProcAddress(_lib, "glTexEnvf");
	TexEnvfv = (void (STDCALL*)(GLenum target, GLenum pname, const GLfloat* params))GetProcAddress(_lib, "glTexEnvfv");
	TexEnvi = (void (STDCALL*)(GLenum target, GLenum pname, GLint param))GetProcAddress(_lib, "glTexEnvi");
	TexEnviv = (void (STDCALL*)(GLenum target, GLenum pname, const GLint* params))GetProcAddress(_lib, "glTexEnviv");
	TexGend = (void (STDCALL*)(GLenum coord, GLenum pname, GLdouble param))GetProcAddress(_lib, "glTexGend");
	TexGendv = (void (STDCALL*)(GLenum coord, GLenum pname, const GLdouble* params))GetProcAddress(_lib, "glTexGendv");
	TexGenf = (void (STDCALL*)(GLenum coord, GLenum pname, GLfloat param))GetProcAddress(_lib, "glTexGenf");
	TexGenfv = (void (STDCALL*)(GLenum coord, GLenum pname, const GLfloat* params))GetProcAddress(_lib, "glTexGenfv");
	TexGeni = (void (STDCALL*)(GLenum coord, GLenum pname, GLint param))GetProcAddress(_lib, "glTexGeni");
	TexGeniv = (void (STDCALL*)(GLenum coord, GLenum pname, const GLint* params))GetProcAddress(_lib, "glTexGeniv");
	TexImage1D = (void (STDCALL*)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid* pixels))GetProcAddress(_lib, "glTexImage1D");
	TexImage2D = (void (STDCALL*)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels))GetProcAddress(_lib, "glTexImage2D");
	TexParameterf = (void (STDCALL*)(GLenum target, GLenum pname, GLfloat param))GetProcAddress(_lib, "glTexParameterf");
	TexParameterfv = (void (STDCALL*)(GLenum target, GLenum pname, const GLfloat* params))GetProcAddress(_lib, "glTexParameterfv");
	TexParameteri = (void (STDCALL*)(GLenum target, GLenum pname, GLint param))GetProcAddress(_lib, "glTexParameteri");
	TexParameteriv = (void (STDCALL*)(GLenum target, GLenum pname, const GLint* params))GetProcAddress(_lib, "glTexParameteriv");
	TexSubImage1D = (void (STDCALL*)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid* pixels))GetProcAddress(_lib, "glTexSubImage1D");
	TexSubImage2D = (void (STDCALL*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid* pixels))GetProcAddress(_lib, "glTexSubImage2D");
	Translated = (void (STDCALL*)(GLdouble x, GLdouble y, GLdouble z))GetProcAddress(_lib, "glTranslated");
	Translatef = (void (STDCALL*)(GLfloat x, GLfloat y, GLfloat z))GetProcAddress(_lib, "glTranslatef");
	Vertex2d = (void (STDCALL*)(GLdouble x, GLdouble y))GetProcAddress(_lib, "glVertex2d");
	Vertex2dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glVertex2dv");
	Vertex2f = (void (STDCALL*)(GLfloat x, GLfloat y))GetProcAddress(_lib, "glVertex2f");
	Vertex2fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glVertex2fv");
	Vertex2i = (void (STDCALL*)(GLint x, GLint y))GetProcAddress(_lib, "glVertex2i");
	Vertex2iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glVertex2iv");
	Vertex2s = (void (STDCALL*)(GLshort x, GLshort y))GetProcAddress(_lib, "glVertex2s");
	Vertex2sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glVertex2sv");
	Vertex3d = (void (STDCALL*)(GLdouble x, GLdouble y, GLdouble z))GetProcAddress(_lib, "glVertex3d");
	Vertex3dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glVertex3dv");
	Vertex3f = (void (STDCALL*)(GLfloat x, GLfloat y, GLfloat z))GetProcAddress(_lib, "glVertex3f");
	Vertex3fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glVertex3fv");
	Vertex3i = (void (STDCALL*)(GLint x, GLint y, GLint z))GetProcAddress(_lib, "glVertex3i");
	Vertex3iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glVertex3iv");
	Vertex3s = (void (STDCALL*)(GLshort x, GLshort y, GLshort z))GetProcAddress(_lib, "glVertex3s");
	Vertex3sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glVertex3sv");
	Vertex4d = (void (STDCALL*)(GLdouble x, GLdouble y, GLdouble z, GLdouble w))GetProcAddress(_lib, "glVertex4d");
	Vertex4dv = (void (STDCALL*)(const GLdouble* v))GetProcAddress(_lib, "glVertex4dv");
	Vertex4f = (void (STDCALL*)(GLfloat x, GLfloat y, GLfloat z, GLfloat w))GetProcAddress(_lib, "glVertex4f");
	Vertex4fv = (void (STDCALL*)(const GLfloat* v))GetProcAddress(_lib, "glVertex4fv");
	Vertex4i = (void (STDCALL*)(GLint x, GLint y, GLint z, GLint w))GetProcAddress(_lib, "glVertex4i");
	Vertex4iv = (void (STDCALL*)(const GLint* v))GetProcAddress(_lib, "glVertex4iv");
	Vertex4s = (void (STDCALL*)(GLshort x, GLshort y, GLshort z, GLshort w))GetProcAddress(_lib, "glVertex4s");
	Vertex4sv = (void (STDCALL*)(const GLshort* v))GetProcAddress(_lib, "glVertex4sv");
	VertexPointer = (void (STDCALL*)(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer))GetProcAddress(_lib, "glVertexPointer");
	Viewport = (void (STDCALL*)(GLint x, GLint y, GLsizei width, GLsizei height))GetProcAddress(_lib, "glViewport");

	// wgl
	wglCopyContext = (BOOL  (STDCALL*)(HGLRC, HGLRC, UINT))GetProcAddress(_lib, "wglCopyContext");
	wglCreateContext = (HGLRC (STDCALL*)(HDC))GetProcAddress(_lib, "wglCreateContext");
	wglCreateLayerContext = (HGLRC (STDCALL*)(HDC, int))GetProcAddress(_lib, "wglCreateLayerContext");
	wglDeleteContext = (BOOL  (STDCALL*)(HGLRC))GetProcAddress(_lib, "wglDeleteContext");
	wglGetCurrentContext = (HGLRC (STDCALL*)(VOID))GetProcAddress(_lib, "wglGetCurrentContext");
	wglGetCurrentDC = (HDC   (STDCALL*)(VOID))GetProcAddress(_lib, "wglGetCurrentDC");
	wglGetProcAddress = (PROC  (STDCALL*)(LPCSTR))GetProcAddress(_lib, "wglGetProcAddress");
	wglMakeCurrent = (BOOL  (STDCALL*)(HDC, HGLRC))GetProcAddress(_lib, "wglMakeCurrent");
	wglShareLists = (BOOL  (STDCALL*)(HGLRC, HGLRC))GetProcAddress(_lib, "wglShareLists");
	wglUseFontBitmapsA = (BOOL  (STDCALL*)(HDC, DWORD, DWORD, DWORD))GetProcAddress(_lib, "wglUseFontBitmapsA");
	wglUseFontBitmapsW = (BOOL  (STDCALL*)(HDC, DWORD, DWORD, DWORD))GetProcAddress(_lib, "wglUseFontBitmapsW");
	wglSwapBuffers = (BOOL  (STDCALL*)(HDC))GetProcAddress(_lib, "wglSwapBuffers");
	wglUseFontOutlinesA = (BOOL  (STDCALL*)(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT))GetProcAddress(_lib, "wglUseFontOutlinesA");
	wglUseFontOutlinesW = (BOOL  (STDCALL*)(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT))GetProcAddress(_lib, "wglUseFontOutlinesW");
	wglDescribeLayerPlane = (BOOL  (STDCALL*)(HDC, int, int, UINT, LPLAYERPLANEDESCRIPTOR))GetProcAddress(_lib, "wglDescribeLayerPlane");
	wglSetLayerPaletteEntries = (int   (STDCALL*)(HDC, int, int, int, CONST COLORREF *))GetProcAddress(_lib, "wglSetLayerPaletteEntries");
	wglGetLayerPaletteEntries = (int   (STDCALL*)(HDC, int, int, int, COLORREF *))GetProcAddress(_lib, "wglGetLayerPaletteEntries");
	wglRealizeLayerPalette = (BOOL  (STDCALL*)(HDC, int, BOOL))GetProcAddress(_lib, "wglRealizeLayerPalette");
	wglSwapLayerBuffers = (BOOL  (STDCALL*)(HDC, UINT))GetProcAddress(_lib, "wglSwapLayerBuffers");
	wglSwapMultipleBuffers = (DWORD (STDCALL*)(UINT, CONST WGLSWAP *))GetProcAddress(_lib, "wglSwapMultipleBuffers");
}

void DriverGL11::FreeLib(void)
{
	if(NULL == _lib){
		return;
	}

	FreeLibrary(_lib);
	_lib = NULL;

	// core functionality
	Accum = NULL;
	AlphaFunc = NULL;
	AreTexturesResident = NULL;
	ArrayElement = NULL;
	Begin = NULL;
	BindTexture = NULL;
	Bitmap = NULL;
	BlendFunc = NULL;
	CallList = NULL;
	CallLists = NULL;
	Clear = NULL;
	ClearAccum = NULL;
	ClearColor = NULL;
	ClearDepth = NULL;
	ClearIndex = NULL;
	ClearStencil = NULL;
	ClipPlane = NULL;
	Color3b = NULL;
	Color3bv = NULL;
	Color3d = NULL;
	Color3dv = NULL;
	Color3f = NULL;
	Color3fv = NULL;
	Color3i = NULL;
	Color3iv = NULL;
	Color3s = NULL;
	Color3sv = NULL;
	Color3ub = NULL;
	Color3ubv = NULL;
	Color3ui = NULL;
	Color3uiv = NULL;
	Color3us = NULL;
	Color3usv = NULL;
	Color4b = NULL;
	Color4bv = NULL;
	Color4d = NULL;
	Color4dv = NULL;
	Color4f = NULL;
	Color4fv = NULL;
	Color4i = NULL;
	Color4iv = NULL;
	Color4s = NULL;
	Color4sv = NULL;
	Color4ub = NULL;
	Color4ubv = NULL;
	Color4ui = NULL;
	Color4uiv = NULL;
	Color4us = NULL;
	Color4usv = NULL;
	ColorMask = NULL;
	ColorMaterial = NULL;
	ColorPointer = NULL;
	CopyPixels = NULL;
	CopyTexImage1D = NULL;
	CopyTexImage2D = NULL;
	CopyTexSubImage1D = NULL;
	CopyTexSubImage2D = NULL;
	CullFace = NULL;
	DeleteLists = NULL;
	DeleteTextures = NULL;
	DepthFunc = NULL;
	DepthMask = NULL;
	DepthRange = NULL;
	Disable = NULL;
	DisableClientState = NULL;
	DrawArrays = NULL;
	DrawBuffer = NULL;
	DrawElements = NULL;
	DrawPixels = NULL;
	EdgeFlag = NULL;
	EdgeFlagPointer = NULL;
	EdgeFlagv = NULL;
	Enable = NULL;
	EnableClientState = NULL;
	End = NULL;
	EndList = NULL;
	EvalCoord1d = NULL;
	EvalCoord1dv = NULL;
	EvalCoord1f = NULL;
	EvalCoord1fv = NULL;
	EvalCoord2d = NULL;
	EvalCoord2dv = NULL;
	EvalCoord2f = NULL;
	EvalCoord2fv = NULL;
	EvalMesh1 = NULL;
	EvalMesh2 = NULL;
	EvalPoint1 = NULL;
	EvalPoint2 = NULL;
	FeedbackBuffer = NULL;
	Finish = NULL;
	Flush = NULL;
	Fogf = NULL;
	Fogfv = NULL;
	Fogi = NULL;
	Fogiv = NULL;
	FrontFace = NULL;
	Frustum = NULL;
	GenLists = NULL;
	GenTextures = NULL;
	GetBooleanv = NULL;
	GetClipPlane = NULL;
	GetDoublev = NULL;
	GetError = NULL;
	GetFloatv = NULL;
	GetIntegerv = NULL;
	GetLightfv = NULL;
	GetLightiv = NULL;
	GetMapdv = NULL;
	GetMapfv = NULL;
	GetMapiv = NULL;
	GetMaterialfv = NULL;
	GetMaterialiv = NULL;
	GetPixelMapfv = NULL;
	GetPixelMapuiv = NULL;
	GetPixelMapusv = NULL;
	GetPointerv = NULL;
	GetPolygonStipple = NULL;
	GetString = NULL;
	GetTexEnvfv = NULL;
	GetTexEnviv = NULL;
	GetTexGendv = NULL;
	GetTexGenfv = NULL;
	GetTexGeniv = NULL;
	GetTexImage = NULL;
	GetTexLevelParameterfv = NULL;
	GetTexLevelParameteriv = NULL;
	GetTexParameterfv = NULL;
	GetTexParameteriv = NULL;
	Hint = NULL;
	IndexMask = NULL;
	IndexPointer = NULL;
	Indexd = NULL;
	Indexdv = NULL;
	Indexf = NULL;
	Indexfv = NULL;
	Indexi = NULL;
	Indexiv = NULL;
	Indexs = NULL;
	Indexsv = NULL;
	Indexub = NULL;
	Indexubv = NULL;
	InitNames = NULL;
	InterleavedArrays = NULL;
	IsEnabled = NULL;
	IsList = NULL;
	IsTexture = NULL;
	LightModelf = NULL;
	LightModelfv = NULL;
	LightModeli = NULL;
	LightModeliv = NULL;
	Lightf = NULL;
	Lightfv = NULL;
	Lighti = NULL;
	Lightiv = NULL;
	LineStipple = NULL;
	LineWidth = NULL;
	ListBase = NULL;
	LoadIdentity = NULL;
	LoadMatrixd = NULL;
	LoadMatrixf = NULL;
	LoadName = NULL;
	LogicOp = NULL;
	Map1d = NULL;
	Map1f = NULL;
	Map2d = NULL;
	Map2f = NULL;
	MapGrid1d = NULL;
	MapGrid1f = NULL;
	MapGrid2d = NULL;
	MapGrid2f = NULL;
	Materialf = NULL;
	Materialfv = NULL;
	Materiali = NULL;
	Materialiv = NULL;
	MatrixMode = NULL;
	MultMatrixd = NULL;
	MultMatrixf = NULL;
	NewList = NULL;
	Normal3b = NULL;
	Normal3bv = NULL;
	Normal3d = NULL;
	Normal3dv = NULL;
	Normal3f = NULL;
	Normal3fv = NULL;
	Normal3i = NULL;
	Normal3iv = NULL;
	Normal3s = NULL;
	Normal3sv = NULL;
	NormalPointer = NULL;
	Ortho = NULL;
	PassThrough = NULL;
	PixelMapfv = NULL;
	PixelMapuiv = NULL;
	PixelMapusv = NULL;
	PixelStoref = NULL;
	PixelStorei = NULL;
	PixelTransferf = NULL;
	PixelTransferi = NULL;
	PixelZoom = NULL;
	PointSize = NULL;
	PolygonMode = NULL;
	PolygonOffset = NULL;
	PolygonStipple = NULL;
	PopAttrib = NULL;
	PopClientAttrib = NULL;
	PopMatrix = NULL;
	PopName = NULL;
	PrioritizeTextures = NULL;
	PushAttrib = NULL;
	PushClientAttrib = NULL;
	PushMatrix = NULL;
	PushName = NULL;
	RasterPos2d = NULL;
	RasterPos2dv = NULL;
	RasterPos2f = NULL;
	RasterPos2fv = NULL;
	RasterPos2i = NULL;
	RasterPos2iv = NULL;
	RasterPos2s = NULL;
	RasterPos2sv = NULL;
	RasterPos3d = NULL;
	RasterPos3dv = NULL;
	RasterPos3f = NULL;
	RasterPos3fv = NULL;
	RasterPos3i = NULL;
	RasterPos3iv = NULL;
	RasterPos3s = NULL;
	RasterPos3sv = NULL;
	RasterPos4d = NULL;
	RasterPos4dv = NULL;
	RasterPos4f = NULL;
	RasterPos4fv = NULL;
	RasterPos4i = NULL;
	RasterPos4iv = NULL;
	RasterPos4s = NULL;
	RasterPos4sv = NULL;
	ReadBuffer = NULL;
	ReadPixels = NULL;
	Rectd = NULL;
	Rectdv = NULL;
	Rectf = NULL;
	Rectfv = NULL;
	Recti = NULL;
	Rectiv = NULL;
	Rects = NULL;
	Rectsv = NULL;
	RenderMode = NULL;
	Rotated = NULL;
	Rotatef = NULL;
	Scaled = NULL;
	Scalef = NULL;
	Scissor = NULL;
	SelectBuffer = NULL;
	ShadeModel = NULL;
	StencilFunc = NULL;
	StencilMask = NULL;
	StencilOp = NULL;
	TexCoord1d = NULL;
	TexCoord1dv = NULL;
	TexCoord1f = NULL;
	TexCoord1fv = NULL;
	TexCoord1i = NULL;
	TexCoord1iv = NULL;
	TexCoord1s = NULL;
	TexCoord1sv = NULL;
	TexCoord2d = NULL;
	TexCoord2dv = NULL;
	TexCoord2f = NULL;
	TexCoord2fv = NULL;
	TexCoord2i = NULL;
	TexCoord2iv = NULL;
	TexCoord2s = NULL;
	TexCoord2sv = NULL;
	TexCoord3d = NULL;
	TexCoord3dv = NULL;
	TexCoord3f = NULL;
	TexCoord3fv = NULL;
	TexCoord3i = NULL;
	TexCoord3iv = NULL;
	TexCoord3s = NULL;
	TexCoord3sv = NULL;
	TexCoord4d = NULL;
	TexCoord4dv = NULL;
	TexCoord4f = NULL;
	TexCoord4fv = NULL;
	TexCoord4i = NULL;
	TexCoord4iv = NULL;
	TexCoord4s = NULL;
	TexCoord4sv = NULL;
	TexCoordPointer = NULL;
	TexEnvf = NULL;
	TexEnvfv = NULL;
	TexEnvi = NULL;
	TexEnviv = NULL;
	TexGend = NULL;
	TexGendv = NULL;
	TexGenf = NULL;
	TexGenfv = NULL;
	TexGeni = NULL;
	TexGeniv = NULL;
	TexImage1D = NULL;
	TexImage2D = NULL;
	TexParameterf = NULL;
	TexParameterfv = NULL;
	TexParameteri = NULL;
	TexParameteriv = NULL;
	TexSubImage1D = NULL;
	TexSubImage2D = NULL;
	Translated = NULL;
	Translatef = NULL;
	Vertex2d = NULL;
	Vertex2dv = NULL;
	Vertex2f = NULL;
	Vertex2fv = NULL;
	Vertex2i = NULL;
	Vertex2iv = NULL;
	Vertex2s = NULL;
	Vertex2sv = NULL;
	Vertex3d = NULL;
	Vertex3dv = NULL;
	Vertex3f = NULL;
	Vertex3fv = NULL;
	Vertex3i = NULL;
	Vertex3iv = NULL;
	Vertex3s = NULL;
	Vertex3sv = NULL;
	Vertex4d = NULL;
	Vertex4dv = NULL;
	Vertex4f = NULL;
	Vertex4fv = NULL;
	Vertex4i = NULL;
	Vertex4iv = NULL;
	Vertex4s = NULL;
	Vertex4sv = NULL;
	VertexPointer = NULL;
	Viewport = NULL;

	// wgl
	wglCopyContext = NULL;
	wglCreateContext = NULL;
	wglCreateLayerContext = NULL;
	wglDeleteContext = NULL;
	wglGetCurrentContext = NULL;
	wglGetCurrentDC = NULL;
	wglGetProcAddress = NULL;
	wglMakeCurrent = NULL;
	wglShareLists = NULL;
	wglUseFontBitmapsA = NULL;
	wglUseFontBitmapsW = NULL;
	wglSwapBuffers = NULL;
	wglUseFontOutlinesA = NULL;
	wglUseFontOutlinesW = NULL;
	wglDescribeLayerPlane = NULL;
	wglSetLayerPaletteEntries = NULL;
	wglGetLayerPaletteEntries = NULL;
	wglRealizeLayerPalette = NULL;
	wglSwapLayerBuffers = NULL;
	wglSwapMultipleBuffers = NULL;
}